{
  "name": "my-app",
  "private": true,
  "version": "0.0.0",
  "description": "a Sails application",
  "keywords": [],
  "dependencies": {
    "@sailshq/connect-redis": "^3.2.1",
    "@sailshq/lodash": "^3.10.3",
    "@sailshq/socket.io-redis": "^5.2.0",
    "@sailshq/upgrade": "^1.0.9",
    "async": "^2.1.4",
    "aws-sdk": "*",
    "bcrypt": "~0.8.3",
    "bluebird": "^3.5.1",
    "body-parser": "^1.19.0",
    "bootstrap-notify": "^3.1.3",
    "compression": "^1.6.1",
    "connect-mongo": "^2.0.3",
    "connect-timeout": "^1.7.0",
    "container-image-builder": "^3.2.0",
    "cors": "^2.7.1",
    "cross-spawn": "^7.0.1",
    "ejs": "2.3.4",
    "email-templates": "^2.0.0-beta",
    "express": "^4.17.1",
    "extract-values": "^0.1.2",
    "fs.extra": "^1.3.2",
    "googleapis": "^28.1.0",
    "grunt": "^1.0.4",
    "grunt-contrib-clean": "1.0.0",
    "grunt-contrib-coffee": "1.0.0",
    "grunt-contrib-concat": "1.0.1",
    "grunt-contrib-copy": "1.0.0",
    "grunt-contrib-cssmin": "1.0.1",
    "grunt-contrib-jst": "1.0.0",
    "grunt-contrib-less": "1.3.0",
    "grunt-contrib-uglify": "1.0.1",
    "grunt-contrib-watch": "^1.1.0",
    "grunt-sails-linker": "~0.10.1",
    "grunt-sync": "^0.8.1",
    "i18n-iso-countries": "^6.0.0",
    "include-all": "^1.0.0",
    "jsonwebtoken": "~0.4.0",
    "jsrsasign": "^8.0.12",
    "lodash": "3.10.1",
    "mime": "^1.6.0",
    "moment": "^2.24.0",
    "morgan": "^1.9.1",
    "multer": "^1.1.0",
    "multer-s3": "^2.7.0",
    "unggah": "^2.1.0",
    "multer-google-storage": "^1.3.0",
    "@google-cloud/storage": "*",
    "nginx-conf": "^1.3.1",
    "node-fetch": "^2.6.0",
    "node-pandas": "^1.0.5",
    "node-schedule": "^1.3.2",
    "nodemailer": "^4.4.1",
    "nodemailer-mailgun-transport": "^1.3.6",
    "passport": "^0.4.1",
    "passport-github": "^1.1.0",
    "passport-google-oauth": "^2.0.0",
    "rc": "^1.2.8",
    "s3fs": "^2.5.0",
    "sails": "^1.4.0",
    "sails-disk": "^2.1.0",
    "sails-hook-apianalytics": "^2.0.3",
    "sails-hook-grunt": "^1.0.8",
    "sails-hook-organics": "^2.0.0",
    "sails-hook-orm": "^2.1.1",
    "sails-hook-sockets": "^2.0.0",
    "sails-mongo": "^1.2.0",
    "shortid": "^2.2.15",
    "skipper": "^0.8.7",
    "skipper-csv": "0.0.1",
    "skipper-s3": "^0.6.0",
    "splunk-logging": "^0.10.1",
    "stats-lite": "^2.2.0",
    "swig": "^1.4.2",
    "synchronize": "^2.0.0",
    "timeout-callback": "^2.0.2",
    "uuid": "*",
    "file-type": "^3.3.0",
    "is-svg": "^2.1.0",
    "run-parallel": "^1.1.6"
  },
  "devDependencies": {
    "eslint": "5.16.0",
    "htmlhint": "0.11.0",
    "lesshint": "6.3.6",
    "grunt": "1.0.4",
    "sails-hook-grunt": "^4.0.0"
  },
  "scripts": {
    "start": "NODE_ENV=development node app.js",
    "test": "npm run lint && npm run custom-tests && echo 'Done.'",
    "lint": "./node_modules/eslint/bin/eslint.js . --max-warnings=0 --report-unused-disable-directives && echo '‚úî  Your .js files look so good.' && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/**/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/**/**/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/**/**/**/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/**/**/**/**/*.ejs && ./node_modules/htmlhint/bin/htmlhint -c ./.htmlhintrc views/**/**/**/**/**/**/*.ejs && echo '‚úî  So do your .ejs files.' && ./node_modules/lesshint/bin/lesshint assets/styles/ --max-warnings=0 && echo '‚úî  Your .less files look good, too.'",
    "custom-tests": "echo \"(No other custom tests yet.)\" && echo",
    "deploy": "echo 'This script assumes a dead-simple, opinionated setup on Heroku.' && echo 'But, of course, you can deploy your app anywhere you like.' && echo '(Node.js/Sails.js apps are supported on all modern hosting platforms.)' && echo && echo 'Warning: Specifically, this script assumes you are on the master branch, and that your app can be deployed simply by force-pushing on top of the *deploy* branch.  It will also temporarily use a local *predeploy* branch for preparing assets, that it will delete after it finishes.  Please make sure there is nothing you care about on either of these two branches!!!' && echo '' && echo '' && echo 'Preparing to deploy...' && echo '--' && git status && echo '' && echo '--' && echo 'I hope you are on the master branch and have everything committed/pulled/pushed and are completely up to date and stuff.' && echo '********************************************'  && echo '** IF NOT THEN PLEASE PRESS <CTRL+C> NOW! **' && echo '********************************************' && echo 'Press CTRL+C to cancel.' && echo '(you have five seconds)' && sleep 1 && echo '...4' && sleep 1 && echo '...3' && sleep 1 && echo '...2' && sleep 1 && echo '...1' && sleep 1  && echo '' && echo 'Alright, here we go.  No turning back now!' && echo 'Trying to switch to master branch...' && git checkout master && echo && echo 'OK.  Now wiping node_modules/ and running npm install...' && rm -rf node_modules && rm -rf package-lock.json && npm install && (git add package-lock.json && git commit -am 'AUTOMATED COMMIT: Did fresh npm install before deploying, and it caused something relevant (probably the package-lock.json file) to change!  This commit tracks that change.' || true) && echo 'Deploying as version:' && npm version patch && echo '' && git push origin master && git push --tags && (git branch -D predeploy > /dev/null 2>&1 || true) && git checkout -b predeploy && (echo 'Now building+minifying assets for production...' && echo '(Hang tight, this could take a while.)' && echo && node node_modules/grunt/bin/grunt buildProd || (echo && echo '------------------------------------------' && echo 'IMPORTANT!  IMPORTANT!  IMPORTANT!' && echo 'ERROR: Could not compile assets for production!' && echo && echo 'Attempting to recover automatically by stashing, ' && echo 'switching back to the master branch, and then ' && echo 'deleting the predeploy branch... ' && echo && echo 'After this, please fix the issues logged above' && echo 'and push that up.  Then, try deploying again.' && echo '------------------------------------------' && echo && echo 'Staging, deleting the predeploy branch, and switching back to master...' && git stash && git checkout master && git branch -D predeploy && false)) && mv www .www && git add .www && node -e 'sailsrc = JSON.parse(require(\"fs\").readFileSync(\"./.sailsrc\", \"utf8\"));  if (sailsrc.paths&&sailsrc.paths.public !== undefined || sailsrc.hooks&&sailsrc.hooks.grunt !== undefined) { throw new Error(\"Cannot complete deployment script: .sailsrc file has conflicting contents!  Please throw away this midway-complete deployment, switch back to your original branch (master), remove the conflicting stuff from .sailsrc, then commit and push that up.\"); }  sailsrc.paths = sailsrc.paths || {};  sailsrc.paths.public = \"./.www\";   sailsrc.hooks = sailsrc.hooks || {};  sailsrc.hooks.grunt = false;  require(\"fs\").writeFileSync(\"./.sailsrc\", JSON.stringify(sailsrc))' && git commit -am 'AUTOMATED COMMIT: Automatically bundling compiled assets as part of deploy, updating the EJS layout and .sailsrc file accordingly.' && git push origin predeploy && git checkout master && git push origin +predeploy:deploy && git push --tags && git branch -D predeploy && git push origin :predeploy && echo '' && echo '--' && echo 'OK, done.  It should be live momentarily on your staging environment.' && echo '(if you get impatient, check the Heroku dashboard for status)' && echo && echo 'Staging environment:' && echo ' üåê‚Äì‚Ä¢  https://staging.example.com' && echo '       (hold ‚åò and click to open links in the terminal)' && echo && echo 'Please review that to make sure it looks good.' && echo 'When you are ready to go to production, visit your pipeline on Heroku and press the PROMOTE TO PRODUCTION button.'"
  },
  "main": "app.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/sandeep.dharma/my-app.git"
  },
  "author": "sandeep.dharma",
  "license": "",
  "engines": {
    "node": "^8.15"
  }
}
